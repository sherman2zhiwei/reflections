What happens when you initialize a repository? Why do you need to do it?

A metadata file is made of all the commits.
It is necessary to install the .git file that makes a version control git repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

It allows for a 'transition phase' where planning can be done before committing certain files.
This removes the risk of accidentally committing something you did not intend to and
creating an unnecessary one


How can you use the staging area to make sure you have one commit per logical change?

By checking the differences between the staging area and the repo,
you can check that each commit that will be made is 
a logical change.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When developing big features or different versions of the game, clumping them together makes it
difficult to trace when developing on more than 2 features at once.
Hence branches help categorize changes and finding bugs will be much easier.


How do the diagrams help you visualize the branch structure?

They provide the locations where branches start, which 
is useful for picturing the whole thing.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The branch connects back with the master and becomes one with it.
It is connected at the latest master copy as changes between
master and branch when the branch was made should be 
transferred over as well.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros of automatic merging are that tedious work of checking every line of code
when there are no conflicts can be resolved.

Cons is that repetitive code (such as turning a repetitive function into a 
method) may not be captured and hence creates unnecessary size.